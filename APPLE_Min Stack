#include <stack>
using namespace std;

class MinStack {
private:
    stack<int> mainStack;
    stack<int> minStack;

public:
    MinStack() {
        // Constructor initializes empty stacks
    }
    
    void push(int val) {
        mainStack.push(val);
        // Push to minStack if it's empty or the value is less than or equal to the current minimum
        if (minStack.empty() || val <= minStack.top()) {
            minStack.push(val);
        }
    }
    
    void pop() {
        // If the top of mainStack is the same as the top of minStack, pop from both stacks
        if (!minStack.empty() && mainStack.top() == minStack.top()) {
            minStack.pop();
        }
        mainStack.pop();
    }
    
    int top() {
        return mainStack.top(); // Return the top of mainStack
    }
    
    int getMin() {
        return minStack.top(); // Return the top of minStack, which holds the minimum value
    }
};
