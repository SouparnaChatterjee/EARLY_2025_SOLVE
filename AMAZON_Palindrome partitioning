class Solution {
public:
    vector<vector<string>> partition(string s) {
    vector<vector<string>> res;
    vector<string> curr;
    //backtrack(s,res,index,curr);
    backtrack(s,res,0,curr);
    return res;   
    }
private:
    bool isPalindrome(int start, int end, string& s)
    {
      while(start<end)  
      {
        if(s[start]!=s[end])
        { return false;}
            start++;
            end--;
      }
      return true;
    }
    void backtrack(string& s, vector<vector<string>>& res, int index, vector<string>& curr)
    {
     if(index==s.size()) res.push_back(curr);
     for(int i=index;i<s.size();i++)
     {
        if(isPalindrome(index,i,s))
        {
            curr.push_back(s.substr(index,i-index+1));
            backtrack(s,res,i+1,curr);
            curr.pop_back();
        }
     }
    }
};
